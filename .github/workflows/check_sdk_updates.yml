name: Check SDK Updates

on:
  schedule:
    - cron: '0 * * * *' # Runs every hour
  workflow_dispatch: # Allows manual trigger

jobs:
  check-release:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        repo:
          - "facebook/facebook-ios-sdk"
          - "adjust/ios_sdk"
          - "firebase/firebase-ios-sdk"
          - "adjust/adjust_signature_sdk"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install requests

      - name: Check for new release
        id: check-release
        run: |
          import requests
          import os

          def get_latest_version(repo):
              api_url = f"https://api.github.com/repos/{repo}/releases/latest"
              response = requests.get(api_url)
              if response.status_code == 200:
                  return response.json()['tag_name'], response.json()['html_url']
              else:
                  print(f"‚ùå Failed to fetch latest version for {repo}")
                  return None, None

          def save_version(repo, version):
              version_file = repo.replace("/", "_") + "_latest_version.txt"
              with open(version_file, "w") as f:
                  f.write(version)
              return version_file

          def read_saved_version(version_file):
              try:
                  with open(version_file, "r") as f:
                      return f.read().strip()
              except FileNotFoundError:
                  return None

          repo = "${{ matrix.repo }}"
          latest_version, release_url = get_latest_version(repo)

          if latest_version:
              version_file = save_version(repo, latest_version)
              saved_version = read_saved_version(version_file)

              if latest_version != saved_version:
                  print(f"üéâ New version released: {latest_version} - {release_url}")
                  with open(os.environ['GITHUB_ENV'], 'a') as env_file:
                      env_file.write(f"NEW_VERSION={latest_version}\n")
                      env_file.write(f"RELEASE_URL={release_url}\n")
                      env_file.write(f"SDK={repo}\n")
              else:
                  print(f"‚úÖ {repo} is already up to date")

      - name: Send GitHub Notification
        if: env.NEW_VERSION != ''
        run: |
          echo "üöÄ New version: ${{ env.NEW_VERSION }}"
          echo "üîó Link: ${{ env.RELEASE_URL }}"
          echo "üì¶ SDK: ${{ env.SDK }}"

      - name: Send Email Notification
        if: env.NEW_VERSION != ''
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
        run: |
          if [ -n "$SMTP_SERVER" ]; then
            echo "Sending email notification..."
            python -m smtplib send \
              --from "$SMTP_USER" \
              --to "$TO_EMAIL" \
              --subject "SDK Update: ${{ env.SDK }} ${{ env.NEW_VERSION }}" \
              --body "A new version has been released: ${{ env.RELEASE_URL }}" \
              --smtp "$SMTP_SERVER:$SMTP_PORT" \
              --login "$SMTP_USER:$SMTP_PASSWORD"
          else
            echo "‚ùå SMTP not configured, skipping email"
          fi

      - name: Send Telegram Notification
        if: env.NEW_VERSION != ''
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            MESSAGE="üöÄ New version released\nüì¶ SDK: ${{ env.SDK }}\nüîñ Version: ${{ env.NEW_VERSION }}\nüîó Link: ${{ env.RELEASE_URL }}"
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="$MESSAGE"
            echo "‚úÖ Telegram notification sent"
          else
            echo "‚ùå Telegram Token or Chat ID not configured"
          fi
