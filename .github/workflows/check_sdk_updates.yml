name: Check SDK Updates

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

# Serialize all matrix jobs to prevent push conflicts
concurrency:
  group: check-sdk-updates
  cancel-in-progress: false

jobs:
  check-release:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        repo:
          - "facebook/facebook-ios-sdk"
          - "adjust/ios_sdk"
          - "firebase/firebase-ios-sdk"
          - "adjust/adjust_signature_sdk"

    steps:
      - name: Debug PAT_TOKEN
        run: |
          if [ -n "${{ secrets.PAT_TOKEN }}" ]; then
            echo "✅ PAT_TOKEN is set (first 5 chars): ${PAT_TOKEN:0:5}..."
          else
            echo "❌ PAT_TOKEN is not set"
            exit 1
          fi
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade requests packaging setuptools

      - name: Verify installed dependencies
        run: |
          python --version
          pip --version
          pip list | grep packaging || echo "❌ packaging 未安装"

      - name: Verify check_release.py exists
        run: |
          ls -la
          if [ -f "check_release.py" ]; then
            echo "✅ check_release.py found in root directory"
          else
            echo "❌ check_release.py not found in root directory"
            exit 1
          fi

      - name: Verify versions.json exists
        run: |
          if [ -f "versions.json" ]; then
            echo "✅ versions.json found in root directory"
            cat versions.json
          else
            echo "❌ versions.json not found in root directory"
            exit 1
          fi

      - name: Debug REPO variable
        run: |
          echo "REPO variable: ${{ matrix.repo }}"
          if [ -z "${{ matrix.repo }}" ]; then
            echo "❌ REPO variable is not set"
            exit 1
          fi

      - name: Check for new release
        id: check-release
        env:
          REPO: ${{ matrix.repo }}
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "当前工作目录: $(pwd)"
          echo "环境变量 REPO: $REPO"
          echo "环境变量 GITHUB_TOKEN: ${GITHUB_TOKEN:0:5}..."
          python check_release.py

      - name: Commit updated versions.json
        if: env.VERSION_UPDATED == 'true'
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          echo "🔍 Debugging working directory state before commit..."
          git status
          cat versions.json
          
          git add versions.json
          git commit -m "Update versions.json with new SDK version: ${{ env.SDK }}@${{ env.NEW_VERSION }}"
          
          success=false
          for i in {1..3}; do
            if git push; then
              success=true
              break
            fi
            echo "Push failed, retrying ($i/3)..."
            git fetch origin
            git pull --rebase
            git add versions.json
            git commit --allow-empty -m "Update versions.json with new SDK version: ${{ env.SDK }}@${{ env.NEW_VERSION }} after failed push"
            sleep $((i * 5))
          done
          if [ "$success" != "true" ]; then
            echo "❌ Failed to push after 3 retries"
            exit 1
          fi
        env:
          REPO: ${{ matrix.repo }}
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Revert versions.json on failure
        if: failure()
        run: |
          git checkout -- versions.json
          echo "✅ Reverted versions.json due to job failure"

      - name: Send GitHub Notification
        if: env.VERSION_UPDATED == 'true'
        run: |
          echo "::notice title=SDK 更新通知::🚀 新版本: ${{ env.NEW_VERSION }} 🔗 [查看](${{ env.RELEASE_URL }}) 📦 SDK: ${{ env.SDK }}"

      - name: Send Email Notification
        if: env.VERSION_UPDATED == 'true'
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
        run: |
          if [ -n "$SMTP_SERVER" ]; then
            echo "Sending email notification..."
            SUBJECT="SDK 更新: $SDK $NEW_VERSION"
            BODY="新版本发布: $SDK\n\n版本号: $NEW_VERSION\n下载链接: $RELEASE_URL"
            echo -e "Subject:$SUBJECT\n\n$BODY" | sendmail -v $TO_EMAIL || echo "❌ 邮件发送失败"
          else
            echo "❌ SMTP 未配置，跳过邮件发送"
          fi

      - name: Send Telegram Notification
        if: env.VERSION_UPDATED == 'true'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            MESSAGE="""🚀 *新版本发布*
            📦 SDK: \`${SDK}\`
            🔖 版本号: \`${NEW_VERSION}\`
            🔗 [点击查看](${RELEASE_URL})"""
            
            JSON=$(jq -n --arg chat_id "$TELEGRAM_CHAT_ID" --arg text "$MESSAGE" '{chat_id: $chat_id, text: $text, parse_mode: "Markdown"}')

            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -H "Content-Type: application/json" \
              -d "$JSON"

            echo "✅ Telegram 通知已发送"
          else
            echo "❌ Telegram Token 或 Chat ID 未配置"
          fi
