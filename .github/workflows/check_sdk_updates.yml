name: Check SDK Updates

on:
  schedule:
    - cron: '0 * * * *' # 每小时执行一次
  workflow_dispatch: # 支持手动触发

jobs:
  check-release:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 设置超时时间为 30 分钟
    strategy:
      fail-fast: false
      matrix:
        repo:
          - "facebook/facebook-ios-sdk"            # Facebook SDK
          - "adjust/ios_sdk"                       # Adjust SDK
          - "firebase/firebase-ios-sdk"            # Firebase SDK
          - "adjust/adjust_signature_sdk"          # Adjust Signature SDK

    steps:
      # ✅ 1. 拉取代码仓库
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # ✅ 2. 设置 Python 环境
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      # ✅ 3. 安装必要的库
      - name: Install dependencies
        run: |
          pip install requests
      
      # ✅ 4. 调试 Python 环境
      - name: Verify Python and requests
        run: |
          python --version
          pip show requests

      # ✅ 5. 验证 check_release.py 是否存在
      - name: Verify check_release.py exists
        run: |
          ls -la
          if [ -f "check_release.py" ]; then
            echo "✅ check_release.py found in root directory"
          else
            echo "❌ check_release.py not found in root directory"
            exit 1
          fi

      # ✅ 6. 获取最新版本
      - name: Check for new release
        id: check-release
        env:
          REPO: ${{ matrix.repo }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_PAT }}
        run: |
          echo "当前工作目录: $(pwd)"
          echo "环境变量 REPO: $REPO"
          echo "环境变量 GITHUB_TOKEN: ${GITHUB_TOKEN:0:5}..."
          python check_release.py
        continue-on-error: true

      # ✅ 7. 发送 GitHub Actions 通知
      - name: Send GitHub Notification
        if: env.NEW_VERSION != ''
        run: |
          echo "🚀 新版本: ${{ env.NEW_VERSION }}"
          echo "🔗 链接: ${{ env.RELEASE_URL }}"
          echo "📦 SDK: ${{ env.SDK }}"

      # ✅ 8. 发送邮件通知（如果需要）
      - name: Send Email Notification
        if: env.NEW_VERSION != ''
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
        run: |
          python -c "
          import smtplib
          from email.mime.text import MIMEText

          smtp_server = '$SMTP_SERVER'
          smtp_port = int('$SMTP_PORT' or 587)
          smtp_user = '$SMTP_USER'
          smtp_password = '$SMTP_PASSWORD'
          to_email = '$TO_EMAIL'

          if not all([smtp_server, smtp_port, smtp_user, smtp_password, to_email]):
              print('❌ SMTP 配置不完整，跳过邮件发送')
              exit(0)

          subject = 'SDK 更新: $SDK $NEW_VERSION'
          body = '新版本发布: $SDK\n\n版本号: $NEW_VERSION\n下载链接: $RELEASE_URL'
          msg = MIMEText(body)
          msg['Subject'] = subject
          msg['From'] = smtp_user
          msg['To'] = to_email

          try:
              with smtplib.SMTP(smtp_server, smtp_port) as server:
                  server.starttls()
                  server.login(smtp_user, smtp_password)
                  server.sendmail(smtp_user, to_email, msg.as_string())
                  print('✅ 邮件通知已发送')
          except Exception as e:
              print(f'❌ 邮件发送失败: {str(e)}')
              exit(1)
          "

      # ✅ 9. 发送 Telegram 通知
      - name: Send Telegram Notification
        if: env.NEW_VERSION != ''
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            MESSAGE="🚀 新版本发布\n📦 SDK: $SDK\n🔖 版本号: $NEW_VERSION\n🔗 链接: $RELEASE_URL"
            RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="$MESSAGE")
            if echo "$RESPONSE" | grep -q '"ok":true'; then
              echo "✅ Telegram 通知已发送"
            else
              echo "❌ Telegram 通知发送失败: $RESPONSE"
              exit 1
            fi
          else
            echo "❌ Telegram Token 或 Chat ID 未配置"
          fi
