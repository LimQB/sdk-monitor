name: Check SDK Updates

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

concurrency:
  group: check-sdk-updates-${{ matrix.repo }}
  cancel-in-progress: true

jobs:
  check-release:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        repo:
          - "facebook/facebook-ios-sdk"
          - "adjust/ios_sdk"
          - "firebase/firebase-ios-sdk"
          - "adjust/adjust_signature_sdk"

    steps:
      # ✅ 1. 拉取代码仓库
      - name: Checkout repository
        uses: actions/checkout@v4

      # ✅ 2. 缓存版本文件
      - name: Cache SDK version files
        id: cache-versions
        uses: actions/cache@v3
        with:
          path: versions
          key: sdk-versions-v3-${{ matrix.repo }}-${{ github.run_id }}
          restore-keys: |
            sdk-versions-v3-${{ matrix.repo }}-
            sdk-versions-v3-${{ matrix.repo }}
            sdk-versions-v2-${{ matrix.repo }}-
            sdk-versions-v1-${{ matrix.repo }}-
            sdk-versions-${{ matrix.repo }}-
            sdk-versions-

      # ✅ 3. 调试缓存恢复
      - name: Debug cache restore
        run: |
          echo "📂 缓存恢复后的版本文件目录内容："
          ls -la versions/ || echo "⚠️ 版本目录为空或不存在"
          VERSION_FILE="versions/$(echo ${{ matrix.repo }} | tr '/' '_')_latest_version.txt"
          if [ -f "$VERSION_FILE" ]; then
            echo "✅ 缓存中的版本文件存在，内容："
            cat "$VERSION_FILE"
          else
            echo "❌ 缓存中的版本文件未找到"
          fi

      # ✅ 4. 验证缓存命中
      - name: Verify cache hit
        run: |
          if [ "${{ steps.cache-versions.outputs.cache-hit }}" == "true" ]; then
            echo "✅ 缓存命中，版本文件已恢复"
            ls -la versions/
          else
            echo "⚠️ 缓存未命中，将创建新的版本文件"
          fi

      # ✅ 5. 设置 Python 环境
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # ✅ 6. 安装必要的库
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade requests packaging setuptools

      # ✅ 7. 调试 Python 环境
      - name: Verify installed dependencies
        run: |
          python --version
          pip --version
          pip list | grep packaging || echo "❌ packaging 未安装"

      # ✅ 8. 验证 check_release.py 是否存在
      - name: Verify check_release.py exists
        run: |
          ls -la
          if [ -f "check_release.py" ]; then
            echo "✅ check_release.py found in root directory"
          else
            echo "❌ check_release.py not found in root directory"
            exit 1
          fi

      # ✅ 9. 获取最新版本
      - name: Check for new release
        id: check-release
        env:
          REPO: ${{ matrix.repo }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_PAT }}
        run: |
          echo "当前工作目录: $(pwd)"
          echo "环境变量 REPO: $REPO"
          echo "环境变量 GITHUB_TOKEN: ${GITHUB_TOKEN:0:5}..."
          python check_release.py

      # ✅ 10. 验证版本文件内容
      - name: Verify version file after script
        run: |
          echo "📂 版本文件目录内容："
          ls -la versions/
          VERSION_FILE="versions/$(echo ${{ matrix.repo }} | tr '/' '_')_latest_version.txt"
          if [ -f "$VERSION_FILE" ]; then
            echo "✅ 版本文件存在，内容："
            cat "$VERSION_FILE"
          else
            echo "❌ 版本文件未找到"
          fi

      # ✅ 11. 保存版本文件到缓存（始终保存）
      - name: Save version files to cache
        uses: actions/cache@v3
        with:
          path: versions
          key: sdk-versions-v3-${{ matrix.repo }}-${{ github.run_id }}

      # ✅ 12. 发送 GitHub Actions 通知
      - name: Send GitHub Notification
        if: env.NEW_VERSION != ''
        run: |
          echo "::notice title=SDK 更新通知::🚀 新版本: ${{ env.NEW_VERSION }} 🔗 [查看](${{ env.RELEASE_URL }}) 📦 SDK: ${{ env.SDK }}"

      # ✅ 13. 发送邮件通知（如果需要）
      - name: Send Email Notification
        if: env.NEW_VERSION != ''
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
        run: |
          if [ -n "$SMTP_SERVER" ]; then
            echo "Sending email notification..."
            SUBJECT="SDK 更新: $SDK $NEW_VERSION"
            BODY="新版本发布: $SDK\n\n版本号: $NEW_VERSION\n下载链接: $RELEASE_URL"
            echo -e "Subject:$SUBJECT\n\n$BODY" | sendmail -v $TO_EMAIL || echo "❌ 邮件发送失败"
          else
            echo "❌ SMTP 未配置，跳过邮件发送"
          fi

      # ✅ 14. 发送 Telegram 通知
      - name: Send Telegram Notification
        if: env.NEW_VERSION != ''
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            MESSAGE="""🚀 *新版本发布*
            📦 SDK: \`${SDK}\`
            🔖 版本号: \`${NEW_VERSION}\`
            🔗 [点击查看](${RELEASE_URL})"""
            
            JSON=$(jq -n --arg chat_id "$TELEGRAM_CHAT_ID" --arg text "$MESSAGE" '{chat_id: $chat_id, text: $text, parse_mode: "Markdown"}')

            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -H "Content-Type: application/json" \
              -d "$JSON"

            echo "✅ Telegram 通知已发送"
          else
            echo "❌ Telegram Token 或 Chat ID 未配置"
          fi
